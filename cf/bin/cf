#!/usr/bin/env perl

use strict;
use Getopt::Long;
use Pod::Usage;
use Config::Cf;

my %commands = (
    'copy' => \&do_copy,
    'directory' => \&do_directory,
    'directories' => \&do_directory,
    'link' => \&do_link,
    'man' => \&do_man,
);

# Parse command line.

my $cmd = shift(@ARGV);
pod2usage("$0: bad command: $cmd") unless defined $commands{$cmd};

my $help = 0;
my %opts = ();		# Options for config operation
my %flags = ();		# Major Cf modal flags
my $checktype;
Getopt::Long::Configure("require_order");
GetOptions(
	'user|owner|u=s' => \$opts{USER},
	'mode|m=s' => \$opts{MODE},
	'changetype|t' => \$opts{CHANGE_TYPES},

	'checktype!' => \$checktype,

	'inform|I!' => \$flags{INFORM},
	'dry-run|recon|test|n!' => \$flags{DRYRUN},
	'debug|d!' => \$flags{DEBUG},

	'help|?' => \$help,
	) or pod2usage(2);
pod2usage(1) if $help;

$opts{CHANGE_TYPES} = !$checktype if defined $checktype;
if ( $opts{MODE} =~ /^[1-9]/ ) {
    # Make sure file mode numbers are interpreted in octal
    $opts{MODE} = "0$opts{MODE}";
}

# Set mode flags

my @flaglist = ();
foreach my $key (keys(%flags)) {
    if (defined($flags{$key})) {
	$key = "!$key" if ($flags{$key} == 0);
	push(@flaglist, $key);
    }
}
Config::Cf::SetFlags(@flaglist);

# Remove undefined options (GetOptions initiazes all keys to undef)
foreach my $key (keys(%opts)) {
    if (!defined($opts{$key})) { delete $opts{$key} };
}

# Invoke command

$commands{$cmd}->();
exit(0);


sub do_copy() {
    # ...
}

sub do_directory() {
    foreach my $path (@ARGV) {
	Config::Cf::MakeDir($path, %opts);
    }
}

sub do_link() {
    pod2usage("wrong number of arguments (need 2)") if (@ARGV != 2);
    Config::Cf::MakeLink(@ARGV, %opts);
}

sub do_man() {
    pod2usage(-exitstatus => 0, -verbose => 2);
}

__END__

=head1 NAME

sample - Using cf

=head1 SYNOPSIS

cf I<cf-command> [I<options>] [I<arg> ..]

 Commands:
   copy src .. dest	Copy src file(s) to dest
   directory dir ..	Create directory(s)
   link src dest	Link dest to src
   man			Display manual page

 Options:
    --user user
    --mode permission
    --group group

=cut
